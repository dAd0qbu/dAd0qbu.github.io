import { _ as _export_sfc, r as resolveComponent, c as createElementBlock, a as createStaticVNode, e as createBaseVNode, f as createTextVNode, b as createVNode, o as openBlock } from "./app-BJjiZhLy.js";
const _imports_0 = "/assets/picoctf-2024-CiCP06BS.png";
const _imports_1 = "/assets/picoctf-2024-1-CJo7j0GJ.png";
const _imports_2 = "/assets/picoctf-2024-2-CrVKlwJl.png";
const _imports_3 = "/assets/picoctf-2024-3-CdjMtctE.png";
const _imports_4 = "/assets/picoctf-2024-4-4ixvz_Os.png";
const _imports_5 = "/assets/picoctf-2024-5-B5S9auxW.png";
const _imports_6 = "/assets/picoctf-2024-6-BVAQSyGq.png";
const _imports_7 = "/assets/picoctf-2024-7-CmUrOGV1.png";
const _imports_8 = "/assets/picoctf-2024-8-BSK3Ptwc.png";
const _imports_9 = "/assets/picoctf-2024-9-BCCDbMYm.png";
const _imports_10 = "/assets/picoctf-2024-10-CWwXfR8Q.png";
const _imports_11 = "/assets/picoctf-2024-11-B-Bisgp8.png";
const _imports_12 = "/assets/picoctf-2024-12-BDN6pLa1.png";
const _imports_13 = "/assets/picoctf-2024-13-Bpulg1ml.png";
const _sfc_main = {};
const _hoisted_1 = {
  href: "https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_2 = { class: "custom-container info" };
const _hoisted_3 = {
  href: "https://artifacts.picoctf.net/c_atlas/34/app.tar.gz",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_4 = {
  href: "http://atlas.picoctf.net:53436/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_5 = {
  href: "https://clowncs.github.io/picoctf2024/",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_6 = {
  href: "https://s19ma.github.io/posts/2024/picoCTF_2024.html",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_7 = {
  href: "https://hackmd.io/@n3g4tee/H16kbFm0T",
  target: "_blank",
  rel: "noopener noreferrer"
};
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _cache[16] || (_cache[16] = createStaticVNode('<p>PicoCTF2024 l√† gi·∫£i Weekly ƒë·∫ßu ti√™n trong nƒÉm 2024 c·ªßa CLB v√† c≈©ng c√≥ th·ªÉ xem l√† gi·∫£i debut c·ªßa team m√¨nh d√π ƒë√£ ho·∫°t ƒë·ªông t·ª´ l√¢u. D√π kh√¥ng th·ªÉ gi·∫£i quy·∫øt h·∫øt t·∫•t c·∫£ c√°c challenge nh∆∞ng KH√îNG QUAN TR·ªåNG üí£üí•üí•, b·ªçn m√¨nh c≈©ng ƒë√£ c·ªë g·∫Øng h·∫øt s·ª©c.</p><p><img src="' + _imports_0 + '" alt="image"></p><p>D∆∞·ªõi ƒë√¢y l√† writeup c·ªßa m·ªôt s·ªë b√†i trong PicoCTF</p><h2 id="general-binhexa" tabindex="-1"><a class="header-anchor" href="#general-binhexa"><span>GENERAL: binhexa</span></a></h2><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Challenge</p><p>How well can you perfom basic binary operations? Start searching for the flag here <code>nc titan.picoctf.net</code></p></div><p>B√†i y√™u c·∫ßu connect t·ªõi server nc v√† tr·∫£ l·ªùi m·ªôt s·ªë c√¢u h·ªèi trong th·ªùi gian nh·∫•t ƒë·ªãnh. Sau khi tr·∫£ l·ªùi ƒë·ªß sau c√¢u s·∫Ω y√™u c·∫ßu tr·∫£ l·ªùi l·∫°i c√¢u h·ªèi cu·ªëi c√πng ƒë·ªÉ confirm v√† g·ª≠i flag. <img src="' + _imports_1 + '" alt="image"></p><p>ƒê√¢y l√† script c·ªßa m√¨nh ƒë·ªÉ solve b√†i n√†y.</p><details class="custom-container details"><summary class="custom-container-title">solve.py</summary><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span></span>\n<span class="line"></span>\n<span class="line">conn <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">&quot;titan.picoctf.net&quot;</span><span class="token punctuation">,</span> PORT<span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line">conn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b&quot;Your task is to perform the unique operations in the given order and find the final result in hexadecimal that yields the flag.\\n\\n&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">bin1 <span class="token operator">=</span> conn<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span></span>\n<span class="line">bin2 <span class="token operator">=</span> conn<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>bin1<span class="token punctuation">,</span> bin2<span class="token punctuation">,</span> ope<span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">:</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>option <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;0b</span><span class="token interpolation"><span class="token punctuation">{</span>bin1<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>ope<span class="token punctuation">}</span></span><span class="token string"> 0b</span><span class="token interpolation"><span class="token punctuation">{</span>bin2<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span></span>\n<span class="line">    <span class="token keyword">elif</span> <span class="token punctuation">(</span>option <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;0b</span><span class="token interpolation"><span class="token punctuation">{</span>bin1<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>ope<span class="token punctuation">}</span></span><span class="token string"> 1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span></span>\n<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;0b</span><span class="token interpolation"><span class="token punctuation">{</span>bin2<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>ope<span class="token punctuation">}</span></span><span class="token string"> 1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span></span>\n<span class="line"></span>\n<span class="line">tmp <span class="token operator">=</span> <span class="token string">&quot;&quot;</span></span>\n<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>\n<span class="line">    conn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b&quot;Operation &quot;</span><span class="token punctuation">)</span></span>\n<span class="line">    conn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b&quot;: &quot;</span><span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line">    ope <span class="token operator">=</span> conn<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    res <span class="token operator">=</span> conn<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>bin1<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>ope<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>bin2<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>\n<span class="line">    conn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b&quot;Enter the binary result: &quot;</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">b&quot;1&amp;2&quot;</span> <span class="token keyword">in</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span></span>\n<span class="line">        res <span class="token operator">=</span> calc<span class="token punctuation">(</span>bin1<span class="token punctuation">,</span> bin2<span class="token punctuation">,</span> ope<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>\n<span class="line">        conn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>res<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">elif</span> <span class="token punctuation">(</span><span class="token string">b&quot;Number 1&quot;</span> <span class="token keyword">in</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span></span>\n<span class="line">        res <span class="token operator">=</span> calc<span class="token punctuation">(</span>bin1<span class="token punctuation">,</span> bin2<span class="token punctuation">,</span> ope<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>\n<span class="line">        conn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>res<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">elif</span> <span class="token punctuation">(</span><span class="token string">b&quot;Number 2&quot;</span> <span class="token keyword">in</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span></span>\n<span class="line">        res <span class="token operator">=</span> calc<span class="token punctuation">(</span>bin1<span class="token punctuation">,</span> bin2<span class="token punctuation">,</span> ope<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>\n<span class="line">        conn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>res<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>\n<span class="line">        tmp <span class="token operator">=</span> res</span>\n<span class="line"></span>\n<span class="line">conn<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b&quot;Enter the results of the last operation in hexadecimal: &quot;</span><span class="token punctuation">)</span></span>\n<span class="line">conn<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">conn<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="general-dont-you-love-banners" tabindex="-1"><a class="header-anchor" href="#general-dont-you-love-banners"><span>GENERAL: dont-you-love-banners</span></a></h2><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Challenge</p><p>Can you abuse the banner? Additional details will be available after launching your challenge instance.</p></div><p>Tr∆∞·ªõc ti√™n ta c·∫ßn tr·∫£ l·ªùi m·ªôt s·ªë c√¢u h·ªèi ƒë∆°n gi·∫£n, sau khi tr·∫£ l·ªùi xong s·∫Ω ƒë∆∞·ª£c x√†i bash <img src="' + _imports_2 + '" alt="image"></p><p>Ki·ªÉm tra th√¨ th·∫•y c√≥ script python ƒëang ch·∫°y ·ªü <code>/root</code><img src="' + _imports_3 + '" alt="image"> ·ªû ƒë√¢y c√≥ file <code>flag.txt</code> nh∆∞ng b·ªã gi·ªõi h·∫°n quy·ªÅn ch·ªâ cho user <code>root</code> ƒë·ªçc file.</p><p>C√≤n c√≥ <code>script.py</code> c·ªßa user <code>root</code>, cho ph√©p ta ƒë·ªçc n·ªôi dung c·ªßa file ƒë√≥. ƒê·ªçc th·ª≠ file <code>script.py</code> s·∫Ω th·∫•y code s·∫Ω ƒë·ªçc n·ªôi dung t·ª´ file <code>/home/player/banner</code> v√† print ra khi ch·∫°y sript <img src="' + _imports_4 + '" alt="image"></p><p>--&gt; Ta c√≥ th·ªÉ x√†i symlynk ƒë·ªÉ khi ƒë·ªçc file <code>/home/player/banner</code> n√≥ s·∫Ω t·ª± tr·ªè t·ªõi file <code>/root/flag.txt</code> ƒë·ªÉ ƒë·ªçc v√† print ra. Sau khi t·∫°o symlink, ki·ªÉm tra s·∫Ω th·∫•y banner tr·ªè t·ªõi flag.txt <img src="' + _imports_5 + '" alt="image"> B√¢y gi·ªù ch·ªâ vi·ªác nc l·∫°i l√† c√≥ flag</p><blockquote><p>B√†i n√†y c√≤n m·ªôt c√°ch kh√°c l√† leo quy·ªÅn l√™n root v·ªõi password l√† <code>iloveyou</code> ü§®</p></blockquote><h2 id="general-sansalpha" tabindex="-1"><a class="header-anchor" href="#general-sansalpha"><span>GENERAL: SansAlpha</span></a></h2><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Challenge</p><p>The Multiverse is within your grasp! Unfortunately, the server that contains the secrets of the multiverse is in a universe where keyboards only have numbers and (most) symbols. Additional details will be available after launching your challenge instance.</p></div>', 17)),
    createBaseVNode("p", null, [
      _cache[1] || (_cache[1] = createTextVNode("B√†i cho ph√©p ta s·ª≠ d·ª•ng command nh∆∞ng l·∫°i ban g·∫ßn nh∆∞ h·∫ßu h·∫øt c√°c k√≠ t·ª± alphabet, ch·ªâ c√≥ th·ªÉ x√†i s·ªë v√† c√°c k√≠ t·ª± ƒë·∫∑c bi·ªát. --> M√¨nh nghƒ© ƒë·∫øn h∆∞·ªõng s·ª≠ d·ª•ng ")),
      createBaseVNode("a", _hoisted_1, [
        _cache[0] || (_cache[0] = createTextVNode("wildcards")),
        createVNode(_component_ExternalLinkIcon)
      ]),
      _cache[2] || (_cache[2] = createTextVNode(" ƒë·ªÉ thay th·∫ø."))
    ]),
    _cache[17] || (_cache[17] = createStaticVNode('<p>Tr∆∞·ªõc ti√™n c·∫ßn t√¨m flag file n·∫±m ƒë√¢u, sau khi fuzz th√¨ m√≤ ra n√≥ n·∫±m ·ªü <code>blargh/flag.txt</code><img src="' + _imports_6 + '" alt="image"></p><p>Ti·∫øp theo ta c·∫ßn t√¨m c√°ch ƒë·ªçc file flag V√¨ c√≥ th·ªÉ x√†i k√Ω t·ª± s·ªë n√™n m√¨nh t√¨m c√°c l·ªánh c√≥ ch·ª©a k√Ω t·ª± s·ªë c√≥ th·ªÉ x√†i ƒë∆∞·ª£c <img src="' + _imports_7 + '" alt="image"></p><p>Ta th·∫•y c√≥ base32 (base64) c√≥ th·ªÉ x√†i ƒë∆∞·ª£c n√™n c√≥ th·ªÉ s·ª≠ d·ª•ng <code>/???/???/????32</code> ƒë·ªÉ g·ªçi ƒë·∫øn <code>/usr/bin/base32</code> v√† ƒë·ªçc file <img src="' + _imports_8 + '" alt="image"></p><blockquote><p>Ngo√†i ra c√≤n m·ªôt s·ªë l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng nh∆∞ <code>/usr/bin/diff3</code>, <code>/usr/bin/pdb3.8</code> (v√¨ script ch·∫°y v·ªõi python3.8)</p><p>M·ªôt c√°ch l√†m kh√°c kh√° hay t·ª´ ng∆∞·ªùi anh h·ªç H·ª©a <code>&quot;$(&lt;./??????/????.???)&quot;</code></p></blockquote><h2 id="web-no-sql-injection" tabindex="-1"><a class="header-anchor" href="#web-no-sql-injection"><span>WEB: No Sql Injection</span></a></h2>', 5)),
    createBaseVNode("div", _hoisted_2, [
      _cache[8] || (_cache[8] = createStaticVNode('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Challenge</p>', 2)),
      createBaseVNode("p", null, [
        _cache[5] || (_cache[5] = createTextVNode("Can you try to get access to this website to get the flag? You can download the source ")),
        createBaseVNode("a", _hoisted_3, [
          _cache[3] || (_cache[3] = createTextVNode("here")),
          createVNode(_component_ExternalLinkIcon)
        ]),
        _cache[6] || (_cache[6] = createTextVNode(". The website is running ")),
        createBaseVNode("a", _hoisted_4, [
          _cache[4] || (_cache[4] = createTextVNode("here")),
          createVNode(_component_ExternalLinkIcon)
        ]),
        _cache[7] || (_cache[7] = createTextVNode(". Can you log in?"))
      ])
    ]),
    _cache[18] || (_cache[18] = createStaticVNode('<p>App s·ª≠ d·ª•ng database l√† MongoDB, khi POST <code>/login</code> s·∫Ω g·ª≠i JSON g·ªìm email v√† password cho server <img src="' + _imports_9 + '" alt="image"></p><p>Query c·ªßa MongoDB ta c√≥ th·ªÉ th√™m v√†o m·ªôt object c√≥ key l√† <code>$regex</code> ƒë·ªÉ match query th·ªèa ƒëi·ªÅu ki·ªán c·ªßa regex ƒë√≥. Nh∆∞ th·∫ø, ta ch·ªâ c·∫ßn ƒë∆∞a v√†o email l√† <code>joshiriya355@mumbama.com</code> v√† password match <code>.*</code>.</p><p>Tuy nhi√™n n·∫øu ƒë∆∞a object v√†o password s·∫Ω b·ªã l·ªói, v√¨ ·ªü ph·∫ßn code x·ª≠ l√Ω s·∫Ω check password b·∫Øt ƒë·∫ßu b·∫±ng &quot;{&quot; v√† k·∫øt th√∫c b·∫±ng &quot;}&quot; l√† syntax c·ªßa JSON, khi ƒë√≥ code s·∫Ω t·ª± parse string ƒë√≥ th√†nh JSON object <img src="' + _imports_10 + '" alt="image"></p><p>Gi·ªù ch·ªâ vi·ªác POST l√™n v·ªõi password l√† JSON string s·∫Ω ƒë∆∞·ª£c token, decode token v√† ra flag <img src="' + _imports_11 + '" alt="image"></p><h2 id="web-trickster" tabindex="-1"><a class="header-anchor" href="#web-trickster"><span>WEB: Trickster</span></a></h2><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Challenge</p><p>I found a web app that can help process images: PNG images only! Additional details will be available after launching your challenge instance.</p></div><p>Web cho ph√©p upload h√¨nh ·∫£nh l√™n, khi check <code>/robots.txt</code> ta th·∫•y c√≥ 2 path l√† <code>/instructions.txt</code> v√† <code>/uploads/</code>. Folder upload l√† n∆°i s·∫Ω ch·ª©a c√°c file m√¨nh up l√™n server.</p><details class="custom-container details"><summary class="custom-container-title">/instructions.txt</summary><p>Let&#39;s create a web app for PNG Images processing. It needs to: Allow users to upload PNG images</p><p><strong>look for &quot;.png&quot; extension</strong> in the submitted files</p><p>make sure the <strong>magic bytes match</strong> (not sure what this is exactly but wikipedia says that the first few bytes contain &#39;PNG&#39; in hexadecimal: &quot;50 4E 47&quot; )</p><p>After validation, store the uploaded files so that the admin can retrieve them later and do the necessary processing.</p></details><p>Code s·∫Ω check file c√≥ ph·∫£i PNG hay kh√¥ng d·ª±a v√†o</p><ul><li>File header</li><li>T√™n file c√≥ ch·ª©a &quot;.png&quot;</li></ul><p>V√¨ Backend s·ª≠ d·ª•ng PHP/8.0.30, ta ch·ªâ c·∫ßn upload file php l√™n ch·∫°y h√†m <code>shell_exec</code> ƒë·ªÉ RCE <img src="' + _imports_12 + '" alt="image"></p><p><img src="' + _imports_13 + '" alt="image"></p><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2>', 13)),
    createBaseVNode("p", null, [
      _cache[12] || (_cache[12] = createTextVNode("Check out mah teammates' blog: ")),
      createBaseVNode("a", _hoisted_5, [
        _cache[9] || (_cache[9] = createTextVNode("@clowncs")),
        createVNode(_component_ExternalLinkIcon)
      ]),
      _cache[13] || (_cache[13] = createTextVNode(", ")),
      createBaseVNode("a", _hoisted_6, [
        _cache[10] || (_cache[10] = createTextVNode("s1gm4ü¶Ü")),
        createVNode(_component_ExternalLinkIcon)
      ]),
      _cache[14] || (_cache[14] = createTextVNode(", ")),
      createBaseVNode("a", _hoisted_7, [
        _cache[11] || (_cache[11] = createTextVNode("n3g4tee")),
        createVNode(_component_ExternalLinkIcon)
      ]),
      _cache[15] || (_cache[15] = createTextVNode("."))
    ])
  ]);
}
const picoctf2024_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "picoctf-2024.html.vue"]]);
const data = JSON.parse('{"path":"/blogs/CTF/2024/picoctf-2024.html","title":"PicoCTF 2024","lang":"en-US","frontmatter":{"title":"PicoCTF 2024","date":"2024-03-27T00:00:00.000Z","tags":["NoSQL","FileUpload","RCE","Shellescape"],"categories":["CTF"]},"headers":[{"level":2,"title":"GENERAL: binhexa","slug":"general-binhexa","link":"#general-binhexa","children":[]},{"level":2,"title":"GENERAL: dont-you-love-banners","slug":"general-dont-you-love-banners","link":"#general-dont-you-love-banners","children":[]},{"level":2,"title":"GENERAL: SansAlpha","slug":"general-sansalpha","link":"#general-sansalpha","children":[]},{"level":2,"title":"WEB: No Sql Injection","slug":"web-no-sql-injection","link":"#web-no-sql-injection","children":[]},{"level":2,"title":"WEB: Trickster","slug":"web-trickster","link":"#web-trickster","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1734340044000,"updatedTime":1734340044000,"contributors":[{"name":"Phan Nguyen Huy Duy","email":"pnhd.dyh@gmail.com","commits":1}]},"filePathRelative":"blogs/CTF/2024/picoctf-2024.md"}');
export {
  picoctf2024_html as comp,
  data
};
