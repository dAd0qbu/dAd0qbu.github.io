import { _ as _export_sfc, r as resolveComponent, c as createElementBlock, e as createBaseVNode, a as createStaticVNode, f as createTextVNode, b as createVNode, o as openBlock } from "./app-BJjiZhLy.js";
const _imports_0 = "/assets/greycatctf-2024-BJuFYRpG.png";
const _imports_1 = "/assets/greycatctf-2024-1-BN8Rh6MX.png";
const _imports_2 = "/assets/greycatctf-2024-2-CF9z7uD8.png";
const _imports_3 = "/assets/greycatctf-2024-3-CZji1Ln4.png";
const _sfc_main = {};
const _hoisted_1 = { class: "custom-container info" };
const _hoisted_2 = {
  href: "https://github.com/NUSGreyhats/greyctf24-challs-public/tree/main/quals/web/no-sql-injection/distribution",
  target: "_blank",
  rel: "noopener noreferrer"
};
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _cache[6] || (_cache[6] = createBaseVNode("h2", {
      id: "overview",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#overview"
      }, [
        createBaseVNode("span", null, "Overview")
      ])
    ], -1)),
    createBaseVNode("div", _hoisted_1, [
      _cache[5] || (_cache[5] = createStaticVNode('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Challenge</p><p>I asked My friend Jason to build me a new e-commerce website. We just finished the login system and there&#39;s already bugs ü§¶</p>', 3)),
      createBaseVNode("p", null, [
        _cache[1] || (_cache[1] = createTextVNode("Author: jro")),
        _cache[2] || (_cache[2] = createBaseVNode("br", null, null, -1)),
        createBaseVNode("a", _hoisted_2, [
          _cache[0] || (_cache[0] = createBaseVNode("code", null, "üìÅ no-sql-injection.zip", -1)),
          createVNode(_component_ExternalLinkIcon)
        ]),
        _cache[3] || (_cache[3] = createBaseVNode("br", null, null, -1)),
        _cache[4] || (_cache[4] = createBaseVNode("a", { href: "/tags/SQLi/1" }, [
          createBaseVNode("code", null, "üîñ SQL Injection")
        ], -1))
      ])
    ]),
    _cache[7] || (_cache[7] = createStaticVNode('<p><img src="' + _imports_0 + '" alt="image"></p><ul><li>Web c√≥ hai ch·ª©c nƒÉng c∆° b·∫£n l√† Register l√† Login</li><li>Data nh·∫≠p v√†o s·∫Ω ƒë∆∞·ª£c convert v√† l∆∞u d∆∞·ªõi d·∫°ng base64</li><li>Register ph·∫£i qua hai l·∫ßn x·ª≠ l√Ω l√† <code>register/1</code> ƒë·ªÉ l∆∞u token v√† <code>register/2</code> ƒë·ªÉ l∆∞u username t·ª´ token v√† password. M·∫∑c ƒë·ªãnh s·∫Ω l√† <code>&quot;admin&quot;: false</code></li><li>Khi login, web s·∫Ω check n·∫øu username t∆∞∆°ng ·ª©ng l√† admin th√¨ tr·∫£ v·ªÅ flag.</li></ul><p>Gi·∫£ s·ª≠ khi register v·ªõi username l√† <code>doxbi</code>, username s·∫Ω ƒë∆∞·ª£c ƒë∆∞a v√†o JSON v√† encode sang base64, sau ƒë√≥ l∆∞u v√†o table <code>tokens</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/register/1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token operator">...</span></span>\n<span class="line">  <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token function">btoa</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> username<span class="token punctuation">,</span></span>\n<span class="line">    <span class="token literal-property property">admin</span><span class="token operator">:</span> <span class="token boolean">false</span></span>\n<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token keyword">await</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;insert into tokens values (?)&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>token<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;err&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;token&quot;</span><span class="token operator">:</span> token <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token operator">...</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sau ƒë√≥ ta c·∫ßn nh·∫≠p password v√† token ƒë∆∞·ª£c tr·∫£ v·ªÅ ·ªü b∆∞·ªõc ƒë·∫ßu ƒë·ªÉ POST l√™n <code>/api/register/2</code> ƒë·ªÉ l∆∞u username v√† password</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/api/register/2&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token operator">...</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;select 1 from tokens where token = ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>token<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token string">&quot;Token not found!&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token operator">...</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> admin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">atob</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token keyword">await</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;insert into users (name, password, admin) values (?, ?, ?)&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password<span class="token punctuation">,</span> admin <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;err&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="idea" tabindex="-1"><a class="header-anchor" href="#idea"><span>Idea</span></a></h2><p>·ªû ƒë√¢y, code s·∫Ω check token c√≥ t·ªìn t·∫°i trong database kh√¥ng v√† l·∫•y username, admin t·ª´ token ƒë·ªÉ l∆∞u v√†o table <code>users</code>. V·ªõi b√†i n√†y, ta c·∫ßn ph·∫£i t√¨m c√°ch thay ƒë·ªïi admin c·ªßa token th√†nh true ƒë·ªÉ l·∫•y ƒë∆∞·ª£c flag khi login. ƒêi·ªÉm ƒë·∫∑c bi·ªát c·ªßa b√†i n√†y l√† l∆∞u tr·ªØ d·ªØ li·ªáu trong database d∆∞·ªõi d·∫°ng base64. Tuy nhi√™n khi so s√°nh b·∫±ng th√¨ MySQL l·∫°i kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng, t·ª©c l√† <code>&#39;a&#39; = &#39;A&#39;</code>. M√† base64 l·∫°i kh√¥ng nh∆∞ th·∫ø, decode <code>AAAA</code> v√† <code>aaaa</code> s·∫Ω cho ra hai k·∫øt qu·∫£ kh√°c nhau. Ta c√≥ th·ªÉ t·∫≠n d·ª•ng vi·ªác n√†y ƒë·ªÉ bypass vi·ªác check token t·ª´ database v√† thay ƒë·ªïi admin th√†nh true.</p><h2 id="solution" tabindex="-1"><a class="header-anchor" href="#solution"><span>Solution</span></a></h2><p>ƒêƒÉng k√Ω v·ªõi username l√† <code>doxbi</code>, ta s·∫Ω ƒë∆∞·ª£c token nh∆∞ sau</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;doxbi&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;admin&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Ta c·∫ßn inject v√†o username ƒë·ªÉ c√≥ th·ªÉ set admin th√†nh true</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;doxbi&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;admin&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">&quot;a&quot;</span><span class="token operator">:</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;admin&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">eyJuYW1lIjoiZG94YmkiLCJhZG1pbiI6dHJ1ZSwiYSI6ImIiLCJhZG1pbiI6ZmFsc2V9</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>M√¨nh s·∫Ω thay ƒë·ªïi m·ªôt s·ªë k√Ω t·ª± hoa &lt;-&gt; th∆∞·ªùng, thay th·∫ø d·∫•u nh√°y v·ªõi k√≠ t·ª± kh√°c ƒë·ªÉ inject v√†o username</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;doxbb¬¢-√Çadmin(¬∫true%¬¢b√Ç: √Ç&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;admin&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">eyJuYW1lIjoiZG94YmKiLcJhZG1pbii6dHJ1ZSWiYsI6IMIiLCJhZG1pbiI6ZmFsc2V9</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>T·ªõi ƒë√¢y v·∫´n c√≤n v·∫•n ƒë·ªÅ nh·ªè v·ªõi key <code>admin</code> ·ªü cu·ªëi, n√≥ s·∫Ω ghi ƒë√® l√™n key <code>admin</code> ta th√™m v√†o, ta ch·ªâ c·∫ßn thay ƒë·ªïi key v·ªõi c√°ch t∆∞∆°ng t·ª± nh∆∞ tr√™n</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;doxbb¬¢-√Çadmin(¬∫true%¬¢b√Ç: √Ç&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;Gdmin&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">eyJuYW1lIjoiZG94YmKiLcJhZG1pbii6dHJ1ZSWiYsI6IMIiLCJHZG1pbiI6ZmFsc2V9</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C·ª• th·ªÉ, m√¨nh c·∫ßn ph·∫£i ƒëƒÉng k√Ω v·ªõi username l√† <code>doxbb¬¢-√Çadmin(¬∫true%¬¢b√Ç: √Ç</code>. Token <code>eyJuYW1lIjoiZG94YmKiLcJhZG1pbii6dHJ1ZSWiYsI6IMIiLCJhZG1pbiI6ZmFsc2V9</code> s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o trong table. <img src="' + _imports_1 + '" alt="image"> Sau khi token ƒë∆∞·ª£c l∆∞u v√†o database, ta POST l√™n <code>/register/2</code> v·ªõi token ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a ƒë·ªÉ set admin th√†nh true. <img src="' + _imports_2 + '" alt="image"> Khi MySQL compare v·∫´n s·∫Ω tr·∫£ v·ªÅ 1, nh∆∞ng khi decode base64 s·∫Ω ra name=doxbi, admin=true v√† l∆∞u v√†o table. Gi·ªù ch·ªâ c·∫ßn login v·ªõi username l√† <code>doxbi</code> v√† password ƒë·ªÉ l·∫•y flag <img src="' + _imports_3 + '" alt="image"></p>', 18))
  ]);
}
const greycatctf2024_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "greycatctf-2024.html.vue"]]);
const data = JSON.parse('{"path":"/blogs/CTF/2024/greycatctf-2024.html","title":"Base64 and SQL Injection","lang":"en-US","frontmatter":{"title":"Base64 and SQL Injection","description":"From Grey Cat CTF 2024","date":"2024-04-21T00:00:00.000Z","tags":["SQLi"],"categories":["CTF"]},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"Idea","slug":"idea","link":"#idea","children":[]},{"level":2,"title":"Solution","slug":"solution","link":"#solution","children":[]}],"git":{"createdTime":1734340044000,"updatedTime":1734340044000,"contributors":[{"name":"Phan Nguyen Huy Duy","email":"pnhd.dyh@gmail.com","commits":1}]},"filePathRelative":"blogs/CTF/2024/greycatctf-2024.md"}');
export {
  greycatctf2024_html as comp,
  data
};
